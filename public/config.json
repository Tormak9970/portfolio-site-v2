{
	"projects": {
		"steam-art-manager": {
			"index": 0,
			"name": "Steam Art Manager",
			"description": "Elegant and simple Steam library customization.",
      "tech": [
        "Svelte",
        "Tauri",
        "Rust",
        "TypeScript"
      ],
			"content": {
				"time": 1693401475825,
				"blocks": [
					{
						"type": "header",
						"data": {
							"text": "Description",
							"level": 2
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Steam Art Manager is a tool for managing the art for your Steam game library. It allows users to view their library and upload images either from their computer, or they can browse images from SteamGridDB. The tool also allows users to export their custom art to and from .zip files for easy transfers between computers. The app manages to do all this while avoiding needless usage of the Steam Web API."
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Overview of how Steam's Custom Art System Works",
							"level": 2
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Steam provides a system for users to set custom art for any of the images associated with one of their games. This works by adding an image with a specific name to&nbsp;<i>steam/userdata/USER_ID/config/grid</i>, at which point Steam will automatically detect it when it loads. The Steam Art Manager takes advantage of this by adding images the user selects to this directory with the required names."
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Features",
							"level": 2
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "The tool has a variety of features, most of which are listed previously, but are described in more detail here. Below is an image of the Steam Art Manager running on windows. Any descriptions of the UI will use this image as a reference."
						}
					},
					{
						"type": "image",
						"data": {
							"file": {
								"url": "steam-art-manager.png"
							},
							"caption": "",
							"withBorder": false,
							"stretched": false,
							"withBackground": false
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Filters",
							"level": 3
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "This is the section on the left. These options are used to filter the results from SteamGridDB. Styles filter the stylistic type of the images, dimensions are self explanatory, mimes are the image format, types determine whether gifs or just images are used, and tags filter by noteworthy warnings on the images. The defaults are the same as the website."
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Games",
							"level": 3
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "The games section is in the middle. It loads all of your owned steam games, filtered alphabetically. A search bar is provided for users who have sizeable Steam libraries, or simply wish to find things faster. Unfortunately, the tool occasionally finds games the user has never played, has hidden, or no longer owns, so there is a \"hide game\" option. These selections are saved across sessions, and can be viewed by toggling the \"show hidden\" option."
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Grids",
							"level": 3
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "The final section is on the right. This will only be populated if the user provides a SteamGridDB API key (which a dialog for can be opened by clicking the \"Add SteamGrid Key\" button). It allows the user to select which type of game image they wish to set, and browse SteamGridDB's collection of images for that game."
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Custom Upload",
							"level": 3
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Users can also upload art from their own computer, allowing them to not have to rely on SteamGridDB."
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Import/Export",
							"level": 3
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "The final major feature of this project is importing and exporting custom art. This works by reading all the files in the current user's <i>grids</i>&nbsp;directory, and generating a zip containing them. Alternatively, the app reads the provided zip, and copies the images inside to the user's <i>grids</i>&nbsp;directory, overriding existing images if they exist."
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Caching",
							"level": 3
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Because I am using the SteamGridDB API, I had to be cautious about how and when I made requests to the api. To address this, the app will save requests made during the same session, and it downloads images the user selects, so it will only download each image up to once per session. This helps reduce traffic to the API."
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Lazy Loading Images",
							"level": 3
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "One issue I ran into while building this project is because I needed to load so many images for both games and the SteamGridDB results, it was causing huge performance issues. I was able to remedy this by using lazy loading combined with smaller images. It can occasionally stutter when the user scrolls to fast, but its far within the acceptable range."
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Grid Cleaning",
							"level": 3
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Sometimes Steam randomly changes the appid of non steam games, which leads to having a lot of images that aren't in use. This feature automatically finds them and deletes them, but can also be configured to delete grids for any game."
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Manual Games",
							"level": 3
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Some Steam games get delisted, and consequently aren't loaded by SARM. To account for this, users are able to manually add games to SARM, which function like regular Steam games."
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Custom Update Dialog",
							"level": 3
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "As a part of the v2.9.0 update, I switched from using the build in Tauri updater to a more polished and fitting dialog. The new dialog now displays the changelog for the update, the date of the current update compared to the last, and fits the styling of the rest of the app."
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Workflow Updates",
							"level": 2
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "In the process of working on the Steam Art Manager, I ended up making many improvements to my workflow, my personal favorites being CommitLint and the new app Logging System."
						}
					},
					{
						"type": "header",
						"data": {
							"text": "CommitLint",
							"level": 3
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "<a target=\"_blank\" href=\"https://commitlint.js.org/#/\">CommitLint</a> is a library that enforces strict rules on your commits, ensuring that they all adhere to your specified conventions (my choice being the Angular commit conventions). Not only does this make commit logs more useful, but it makes automatically bumping app versions and generating changelogs much easier."
						}
					},
					{
						"type": "header",
						"data": {
							"text": "New Logging System",
							"level": 3
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Recently I finished a different project, <a target=\"_blank\" href=\"https://github.com/Tormak9970/bash-shortcuts\">Bash Shortcuts</a>, and in the process of working on it I made a rather robust logging system for both the frontend and backend. This was invaluable on many occasions, so I decided to implemented a similar system into the Steam Art Manager. However, it has been designed in such a way that it should be easily integrated into any future Tauri app I create. The system allows logging at various levels (info, warning, and error), passing parameters, and denotes if a log came from the frontend or backend."
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Rust Centric Mindset",
							"level": 3
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "In the past I have always avoided having logic written in Rust in my Tauri projects. I didn't feel comfortable enough with the language, and never found the time to remedy that. However, when I made the logging system for this project I knew I needed to learn Rust, so I did. This came in handy a few times, as there are a couple of operations the app does that take at least 5 seconds in TypeScript, but in Rust can be done in under 1 second. This is such a huge difference for users, and is a lesson I will remember when working on future projects."
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Component Updates",
							"level": 3
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "When making this project, I realized that, while the UI style I typically use is nice, it can be a bit clunky when more complex UI designs are needed. Because of this, I decided to modernize the look, and make it more flexible. I also standardized the parameters for all of my UI components, and added two new ones: a search bar and a tab view."
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Auto Updates for Projects",
							"level": 3
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "As this is the first project of mine that I feel has the potential to garner a decent userbase, I finally decided to look into how to set up automatic updates for Tauri apps. It boiled down to either having a server or a static .json file hosted somewhere that indicates the most recent release and where to download it. I choose the static json file as I was able to integrate it into my build pipeline, so no hosting fees are required."
						}
					},
					{
						"type": "header",
						"data": {
							"text": "GitHub Actions",
							"level": 3
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "On the topic of build pipelines, I fell into the infuriating rabbit-hole that is GitHub Actions. These workflows allow you to automate nearly anything, but are a massive pain to test and debug. My goal was to set up a build pipeline that would do the following:"
						}
					},
					{
						"type": "list",
						"data": {
							"style": "ordered",
							"items": [
								{
									"content": "Generate a changelog from commits since the last release",
									"items": []
								},
								{
									"content": "If there are new features, bump the feature version (1.x.0), otherwise bump the bug fix version (1.0.x).",
									"items": []
								},
								{
									"content": "Create a release draft with the changelog and new version",
									"items": []
								},
								{
									"content": "Build the application for both Windows and Linux",
									"items": []
								},
								{
									"content": "Add the installers to the release",
									"items": []
								},
								{
									"content": "Generate a new .json file for the updater to check",
									"items": []
								},
								{
									"content": "Publish the new release",
									"items": []
								}
							]
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "I did finally manage to get the pipeline working, but it took almost 80 workflow runs to get to that point. Definitely worth it, but a struggle nonetheless."
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Update v2.9.0",
							"level": 2
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Features:"
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "added a custom update modal",
									"items": []
								}
							]
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Fixes:"
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "removed the update event listener (breaks custom updater)",
									"items": []
								}
							]
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Build Pipeline Improvements:"
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "latest.json file now includes most recent changelog",
									"items": []
								}
							]
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Update v2.8.0",
							"level": 2
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Features:"
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "Added a custom wix installer template",
									"items": []
								}
							]
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Fixes:"
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "steam install check now works correctly",
									"items": []
								}
							]
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Update v2.7.0",
							"level": 2
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Features:"
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "significant UI overhaul",
									"items": [
										{
											"content": "The UI is much more cohesive, and transitions are more fluid and less jarring",
											"items": []
										}
									]
								},
								{
									"content": "added logging of rust panic messages",
									"items": []
								}
							]
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Fixes:"
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "added more robust error checks to grid fetching",
									"items": []
								},
								{
									"content": "corrected typo in manual games tooltip",
									"items": []
								},
								{
									"content": "edit logo position icon now shows on linux",
									"items": []
								},
								{
									"content": "lightmode revamp for better contrast",
									"items": []
								},
								{
									"content": "steam game icon setting now works properly",
									"items": []
								},
								{
									"content": "taskbar icon is less blurry then before on linux",
									"items": []
								}
							]
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Update v2.6.4",
							"level": 2
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Fixes:"
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "reduced the grid count needed to display a game",
									"items": []
								},
								{
									"content": "corrected a typo in the linux uninstaller filename",
									"items": []
								}
							]
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Update v2.6.3",
							"level": 2
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Fixes:"
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "added check for logoPosition property when loading logo configs",
									"items": []
								},
								{
									"content": "added header to manual game list",
									"items": []
								},
								{
									"content": "logo positions no longer breaks saving when removed",
									"items": []
								},
								{
									"content": "settings modal now closes properly",
									"items": []
								},
								{
									"content": "selected sgdb game properly reset on game change",
									"items": []
								},
								{
									"content": "steam not installed warning now displays correctly",
									"items": []
								}
							]
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Update v2.6.0",
							"level": 2
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Features:"
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "added chocolatey package",
									"items": []
								},
								{
									"content": "added confirmation dialog to reload button",
									"items": []
								},
								{
									"content": "added grid cleaning",
									"items": []
								},
								{
									"content": "added panic capture to logging",
									"items": []
								},
								{
									"content": "added timeouts to all http requests",
									"items": []
								},
								{
									"content": "added timeouts to all grid image fetching",
									"items": []
								},
								{
									"content": "added window position persistance",
									"items": []
								},
								{
									"content": "added manual game manager",
									"items": []
								}
							]
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Fixes:"
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "duplicate games are now detected on load",
									"items": []
								},
								{
									"content": "settings manager moved to a modal for consistency",
									"items": []
								}
							]
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Build Pipeline Improvements:"
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "pipeline improvements now included in releases",
									"items": []
								},
								{
									"content": "release assets no longer have version tied to their file names",
									"items": []
								}
							]
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Update v2.5.0",
							"level": 2
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Features:"
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "added connectivity check to the Linux installer",
									"items": []
								},
								{
									"content": "added Linux uninstaller and uninstall shortcuts",
									"items": []
								}
							]
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Fixes:"
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "footer tooltips now make more sense",
									"items": []
								},
								{
									"content": "installer no longer messes up version number",
									"items": []
								},
								{
									"content": "linux installer no longer errors",
									"items": []
								}
							]
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Update v2.4.0",
							"level": 2
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Features:"
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "added check for Steam installation",
									"items": []
								},
								{
									"content": "now checks if there is at least one user",
									"items": []
								},
								{
									"content": "Linux installer now creates desktop and start menu shortcuts",
									"items": []
								}
							]
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Fixes:"
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "added check for malformed userconfig",
									"items": []
								}
							]
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Update v2.3.0",
							"level": 2
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Features:"
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "added logo config support to import and export",
									"items": []
								},
								{
									"content": "added reset logo position button",
									"items": []
								},
								{
									"content": "changed footer buttons to icons with tooltips",
									"items": []
								},
								{
									"content": "logo positions are loaded only if they exist",
									"items": []
								},
								{
									"content": "major overhaul of logging format",
									"items": []
								}
							]
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Fixes:"
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "dropdown arrow no longer bugs out on game switch",
									"items": []
								},
								{
									"content": "dropdowns are no longer bugged when closing",
									"items": []
								},
								{
									"content": "images are no longer draggable",
									"items": []
								},
								{
									"content": "reload now relaunches the entire app",
									"items": []
								},
								{
									"content": "removing logos deletes the correct files",
									"items": []
								},
								{
									"content": "selected sgdb game persists when switching grid type",
									"items": []
								},
								{
									"content": "steam api keys are now loaded properly",
									"items": []
								}
							]
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Update v2.1.2",
							"level": 2
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Fixes:"
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "non steam games are loading properly again",
									"items": []
								},
								{
									"content": "shortcut icons now load and save properly",
									"items": []
								},
								{
									"content": "platform switching side effects fixed",
									"items": []
								},
								{
									"content": "shortcut icons now point to the correct location",
									"items": []
								}
							]
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Update v2.1.0",
							"level": 2
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Features:"
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "added game name tooltips on hover",
									"items": []
								},
								{
									"content": "added single instance inforcement",
									"items": []
								},
								{
									"content": "clear grids now displays only if game has grids",
									"items": []
								},
								{
									"content": "added global error failsafe to frontend",
									"items": []
								}
							]
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Fixes:"
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "clearing grids no longer erases image in UI",
									"items": []
								},
								{
									"content": "fixed loading if game selected on key change",
									"items": []
								},
								{
									"content": "theme state now properly saved and loaded",
									"items": []
								},
								{
									"content": "webp images are now properly applied",
									"items": []
								}
							]
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Update v2.0.0",
							"level": 2
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Features:"
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "added the ability to change the current steam user",
									"items": []
								},
								{
									"content": "added the ability to discard changes per game",
									"items": []
								},
								{
									"content": "added animated download indicator to grids",
									"items": []
								},
								{
									"content": "added full support for non steam games",
									"items": []
								},
								{
									"content": "added grid preview modals",
									"items": []
								},
								{
									"content": "added message when attempting to quit without saving",
									"items": []
								},
								{
									"content": "added notes icon to grids",
									"items": []
								},
								{
									"content": "added reload button to footer",
									"items": []
								},
								{
									"content": "animated images only animate when hovered",
									"items": []
								},
								{
									"content": "ctrl+f now navigates to the app's search bar",
									"items": []
								},
								{
									"content": "added sgdb selection for steam games",
									"items": []
								},
								{
									"content": "grid type is now always shown",
									"items": []
								},
								{
									"content": "added lightmode for haters",
									"items": []
								},
								{
									"content": "added loading games via localconfig",
									"items": []
								},
								{
									"content": "added non steam game import/export",
									"items": []
								}
							]
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Fixes:"
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "apngs now download properly",
									"items": []
								},
								{
									"content": "app no longer takes ages to load (caused by persisted-scope mem leak)",
									"items": []
								},
								{
									"content": "app now loads on launch without interaction",
									"items": []
								},
								{
									"content": "app now retries online test multiple times",
									"items": []
								},
								{
									"content": "appinfo reading is faster and more reliable",
									"items": []
								},
								{
									"content": "changes now apply after multiple saves",
									"items": []
								},
								{
									"content": "filters now work properly",
									"items": []
								},
								{
									"content": "grids now save for games previously without them",
									"items": []
								},
								{
									"content": "ico images now properly render",
									"items": []
								},
								{
									"content": "logo and icon images now preview properly",
									"items": []
								},
								{
									"content": "numbers no longer look terrible",
									"items": []
								},
								{
									"content": "settings now load properly",
									"items": []
								},
								{
									"content": "strings no longer get malformed when read",
									"items": []
								}
							]
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Purpose",
							"level": 2
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "The main reason I decided to make this project was I discovered the <a target=\"_blank\" href=\"https://github.com/SteamGridDB/steam-rom-manager\">Steam Rom Manager</a>, and wanted a tool that was similar but for my Steam library. I thought this would also be a great opportunity to finally start learning the Rust language (as is used as the backend for Tauri apps). Additionally, I wanted to build my first project that was cross platform (in this case, just Windows and Linux)."
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Conclusion",
							"level": 2
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Looking back, I was able to create exactly what I set out to do and more. The tool allows users to browse their Steam games and set the various types of art for each game, either with their own images or images from <a target=\"_blank\" href=\"https://steamgriddb.com\">https://steamgriddb.com</a>. I also learned a lot about Rust, and I have been blown away by its performance and ease of use. Lastly, I got the chance to familiarize myself with GitHub Actions. They were a huge pain to get up and running, but now that they are, I can automatically generate changelogs and releases for Steam Art Manager when I make changes. Additionally, I also learned how wix templating works, which is something I struggled a lot with in the past."
						}
					}
				],
				"version": "2.19.3"
			},
			"link": "https://github.com/Tormak9970/Steam-Art-Manager",
			"image": "./images/projects/steam-art-manager.png"
		},
		"tabmaster": {
			"index": 1,
			"name": "TabMaster",
			"description": "A Decky plugin for the Valve Steam Deck that gives users full control over their library tabs.",
      "tech": [
        "Decky",
        "React",
        "TypeScript"
      ],
			"content": {
				"time": 1706374162836,
				"blocks": [
					{
						"type": "header",
						"data": {
							"text": "Description",
							"level": 2
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "TabMaster is a Decky plugin for the Valve Steam Deck that gives users full control over their library tabs. From making custom tabs, to replacing existing ones, it can do it all, with a robust filtering system to allow for extremely complexed filtering."
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Features",
							"level": 2
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "Make custom tabs",
									"items": []
								},
								{
									"content": "Hide existing tabs",
									"items": []
								},
								{
									"content": "Reorder both custom and existing tabs",
									"items": []
								},
								{
									"content": "Tab profiles for creating interchangeable ",
									"items": []
								},
								{
									"content": "In depth docs to help guide users should they have any issues",
									"items": []
								}
							]
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Filters List",
							"level": 2
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "Collection - includes games in that collection",
									"items": []
								},
								{
									"content": "Regex - includes games whose titles match the provided ",
									"items": []
								},
								{
									"content": "Installed/Uninstalled - includes games that are either installed or uninstalled",
									"items": []
								},
								{
									"content": "Friends who Own - includes games owned by both the user and the listed friend(s)",
									"items": []
								},
								{
									"content": "Games with Tags - includes games with the provided tag(s)",
									"items": []
								},
								{
									"content": "Game's platform - includes games from the target platform",
									"items": []
								},
								{
									"content": "Deck Verified Status - includes games with the specified verification status",
									"items": []
								},
								{
									"content": "Blacklist - blacklists the provided games",
									"items": []
								},
								{
									"content": "Whitelist - whitelists the provided games",
									"items": []
								},
								{
									"content": "Merge Group - a sub group of filters that includes games that pass the sub group",
									"items": []
								},
								{
									"content": "Platform - Selects Steam or non-Steam apps",
									"items": []
								},
								{
									"content": "Deck Compatibility - Selects apps that have a specific Steam Deck compatibility status",
									"items": []
								},
								{
									"content": "Review Score - Selects apps that are greater/less than the provided Metacritic/Steam review score",
									"items": []
								},
								{
									"content": "Time Played - Selects apps that have a play time greater/less than the provided time",
									"items": []
								},
								{
									"content": "Size on Disk - Selects apps that have an install size greater/less than the provided size",
									"items": []
								},
								{
									"content": "Release Date - Selects apps that were released before/after the provided date",
									"items": []
								},
								{
									"content": "Last Played - Selects apps that were last played before/after the provided date",
									"items": []
								},
								{
									"content": "Demo - Selects apps that are/aren't demos",
									"items": []
								},
								{
									"content": "Streamable - Selects apps that can/can't be streamed from another computer",
									"items": []
								},
								{
									"content": "Steam Features - Selects apps that support specific Steam Features",
									"items": []
								},
								{
									"content": "MicroSD Card - Selects apps that are present on the inserted/specific MicroSD Car",
									"items": []
								}
							]
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Purpose",
							"level": 2
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "TabMaster started out as a project by another member of the Steam Deck Homebrew community, but was eventually set aside and passed to me, as well as two other developers. We decided to pick it up (as its a tool we all would have loved to use) and essentially rebuild it from the ground up to be faster, more reliable, and more efficient. After that initial refactoring, we got to work adding new filters and features, and incorporating any feedback we got from the community."
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Conclusion",
							"level": 2
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "TabMaster is one of my favorite projects to date. It has been extremely gratifying to see the immense, positive reception it has garnered, as well as a wonderful learning experience. I've gotten to hone my coding style, work collaboratively through the entire process, get experience building off a codebase in need of significant refactoring, gain more experience with React and MobX, and further improve my changelog workflow."
						}
					}
				],
				"version": "2.19.3"
			},
			"link": "https://github.com/Tormak9970/TabMaster",
			"image": "./images/projects/tabmaster.png"
		},
		"reliable-changelog": {
			"index": 2,
			"name": "Reliable Changelog",
			"description": "A GitHub action that generates changelogs based on your commits. Highly configurable and adaptable.",
      "tech": [
        "Actions",
        "CI/CD",
        "TypeScript"
      ],
			"content": {
				"time": 1706375754956,
				"blocks": [
					{
						"type": "header",
						"data": {
							"text": "Description",
							"level": 2
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Reliable Changelog is a GitHub action that automatically generates changelogs based on commits formatted with CommitLint. It is highly configurable and easy to adapt to different use cases, such as automatic versioning or generating a Changelog.md file"
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Features",
							"level": 2
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "Supports all <a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https://github.com/conventional-changelog/commitlint/blob/master/%40commitlint/config-angular/README.md\">@commitlint/config-angular</a> commit prefixes",
									"items": []
								},
								{
									"content": "Generates a clean changelog in markdown",
									"items": []
								},
								{
									"content": "Automatically calculates the next version (configureable)",
									"items": []
								},
								{
									"content": "Creates a release and release tag for the next version",
									"items": []
								},
								{
									"content": "Customize the action's git username and commit message",
									"items": []
								},
								{
									"content": "Can read the current version from a JSON, YAML, or TOML file",
									"items": []
								},
								{
									"content": "Customizable \"Major Version\" commit message",
									"items": []
								},
								{
									"content": "Option to strip commit prefixes from changelog",
									"items": []
								},
								{
									"content": "Limit the types of commits included in the changelog",
									"items": []
								},
								{
									"content": "Change what commit types bump different parts of the version",
									"items": []
								},
								{
									"content": "Change the number of minor and patch commits needed to bump the version multiple times in one release",
									"items": []
								},
								{
									"content": "Customize the lab",
									"items": []
								}
							]
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Purpose",
							"level": 2
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "The main reason for making this was that the existing CommitLint changelog action was seemingly unusable, and I was looking for a solution for automating release changelogs. I decided to simplify the existing one while adding additional features I thought would be useful."
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Conclusion",
							"level": 2
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "I was able to create a stable, adaptable GitHub action that is highly configurable and allows users to easily generate changelogs and version bumps for their projects. I find myself using it in every new project I make, and it has saved me an immense amount of time."
						}
					}
				],
				"version": "2.19.3"
			},
			"link": "https://github.com/Tormak9970/reliable-changelog",
			"image": "./images/projects/reliable-changelog.png"
		},
		"css-loader-for-vs-code": {
			"index": 3,
			"name": "CSS Loader for VS Code",
			"description": "A VS Code extension that adds intellisense support and icons to CSS Loader theme.json files.",
      "tech": [
        "VS Code",
        "TypeScript",
        "JSON"
      ],
			"content": {
				"time": 1693399735329,
				"blocks": [
					{
						"type": "header",
						"data": {
							"text": "Description",
							"level": 2
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "CSS Loader for VS Code is a Visual Studio Code extension that adds intellisense support and file icons to CSS Loader theme.json files. This makes it easier to catch mistakes, as well as improves the developer experience when making themes."
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Design Process",
							"level": 2
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Making the actual extension wasn't all that difficult. While the VS Code API docs are less then sub-par, I was able to create the file icon association and custom JSON Schema relatively quickly. The complexity of this project came from having to deal with Microsoft Azure and the VS Code marketplace. Both had issues when run in certain browsers, as well as being finnicky overall, however now that they are set up"
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Purpose",
							"level": 2
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "Wanted to create a VS Code extension",
									"items": []
								},
								{
									"content": "Wanted to alleviate repeated questions I received on the theme.json spec",
									"items": []
								},
								{
									"content": "Wanted to speed up CSS Loader theme development",
									"items": []
								}
							]
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Conclusion",
							"level": 2
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "Now have experience making extensions for VSCode",
									"items": []
								},
								{
									"content": "Now have experience making JSON Schemas",
									"items": []
								},
								{
									"content": "Got acquainted with how Azure DevOps and the VS Code marketplace work",
									"items": []
								},
								{
									"content": "Updated my custom changelog GitHub action to also write to a changelog file",
									"items": []
								},
								{
									"content": "Learned how to schedule automatic update checks with GitHub actions",
									"items": []
								}
							]
						}
					}
				],
				"version": "2.19.3"
			},
			"link": "https://marketplace.visualstudio.com/items?itemName=DeckThemes.css-loader-for-vs-code",
			"image": "./images/projects/css-loader-for-vs-code.png"
		},
		"darkest-dungeon-save-editor": {
			"index": 4,
			"name": "Darkest Dungeon Save Editor",
			"description": "An app for viewing and editing saves from Darkest Dungeon, an Indie Rogue-lite game.",
      "tech": [
        "Svelte",
        "Tauri",
        "TypeScript",
        "Rust"
      ],
			"content": {
				"time": 1668884602490,
				"blocks": [
					{
						"id": "5y1Zw-VRKn",
						"type": "header",
						"data": {
							"text": "Description",
							"level": 2
						}
					},
					{
						"id": "baa741tD8i",
						"type": "paragraph",
						"data": {
							"text": "This project is a save editor for the Indie Rogue-lite game, Darkest Dungeon. The app includes a robust backup system, de-hashing feature, save decoding to valid JSON, save file encoding from JSON, and offers all features through the command line as well. The app is made using Tauri, Svelte, and TypeScript."
						}
					},
					{
						"id": "2BWvYLNnC2",
						"type": "paragraph",
						"data": {
							"text": " The game stores save data in files with the <b>.json</b> extension, however the format is not actually JSON, but rather a very similar format. There are just enough differences to require reading the files from scratch. In order to figure out how to parse the save format I referenced an older <a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https://github.com/robojumper/DarkestDungeonSaveEditor\">save editor</a>."
						}
					},
					{
						"id": "RDt-8PMnEw",
						"type": "header",
						"data": {
							"text": "Features",
							"level": 2
						}
					},
					{
						"id": "OK3KE8Ikwt",
						"type": "header",
						"data": {
							"text": "App",
							"level": 3
						}
					},
					{
						"id": "2uk79oTt_6",
						"type": "paragraph",
						"data": {
							"text": "The app has four main features, Property Name Generation, Save File Decoding, Save File Encoding, and a robust Backup System."
						}
					},
					{
						"id": "JfXpE3N6EZ",
						"type": "image",
						"data": {
							"file": {
								"url": "DDSEditor-main-ui.png"
							},
							"caption": "",
							"withBorder": false,
							"stretched": false,
							"withBackground": false
						}
					},
					{
						"id": "hL9RdJm4RS",
						"type": "paragraph",
						"data": {
							"text": "The property name generation is necessary because some properties in the save files are hashed, and in order to figure out the property names the app must scan the game data directory and generate a cache of all found property names. This allows the save editor to correctly label all of the properties when it decodes a save, making it easier for users to find the fields they wish to edit."
						}
					},
					{
						"id": "jAJuPQl_3P",
						"type": "paragraph",
						"data": {
							"text": "One of the two most main features is the save file decoding. This is how the program converts the binary <b>.json</b>&nbsp;files to actual, editable JSON data. This makes it much easier for users to edit their saves, and simplifies the process of backing up saves in a readable format. In order to support editing the JSON data in a nice way, I used the CodeMirror library with custom styling to match the theme of the UI."
						}
					},
					{
						"id": "eZrT6FK1N1",
						"type": "image",
						"data": {
							"file": {
								"url": "json-editor.png"
							},
							"caption": "",
							"withBorder": false,
							"stretched": false,
							"withBackground": false
						}
					},
					{
						"id": "jAGsI-zXbO",
						"type": "paragraph",
						"data": {
							"text": "The second main feature is the save file encoding, the necessary counterpart to decoding. This feature allows users to save their changes and convert the editable JSON data back into the binary <b>.json</b>&nbsp;data, enabling their edits to be reflected in the actual game. This works be essentially reversing the process done for decoding, and writing the resulting binary data to a file with the&nbsp;<b>.json</b>&nbsp;extension."
						}
					},
					{
						"id": "e1HIf7YPS3",
						"type": "paragraph",
						"data": {
							"text": "The final feature is the backup system. When messing with important data such as game saves, it is always important to offer a backup system to cover cases where the user (or the app during testing) makes a mistake that corrupts the save files. The system saves a zip of all save files with a name containing the time and the profile slot saved. This allows the user to keep multiple backups, and easily figure out when they were created. By having a backup system (and prompting users to use it), any issues related to the app corrupting game saves can be eliminated, limiting the only possible problem to the user not making backups."
						}
					},
					{
						"id": "yaXh8FYqU0",
						"type": "image",
						"data": {
							"file": {
								"url": "Backup-manager.png"
							},
							"caption": "",
							"withBorder": false,
							"stretched": false,
							"withBackground": false
						}
					},
					{
						"id": "YJv4LZzRec",
						"type": "header",
						"data": {
							"text": "CLI",
							"level": 3
						}
					},
					{
						"id": "74B1t95R53",
						"type": "paragraph",
						"data": {
							"text": "The reason for including a Command Line Interface (CLI) with the program was mainly to ensure that none of the features of the older save editor were missing from my version, as that would defeat the purpose of having a newer, better version. Additionally, having the ability to run logic from the command line makes automating tasks such as decoding and then backing up saves much easier, as it can all be done through a single script."
						}
					},
					{
						"id": "rHtePk4Va7",
						"type": "header",
						"data": {
							"text": "Design Philosophy",
							"level": 2
						}
					},
					{
						"id": "1KNDwtoEXr",
						"type": "paragraph",
						"data": {
							"text": "During the development of this program, I learned about the Model View Controller (MVC) design pattern in school and thought what better way to reinforce what I was learning then to implement it myself. Consequently, this program was made with the MVC pattern in mind, isolating all UI interaction to a set of controller classes (namely the <b>AppController</b>, <b>ToastController</b>, and <b>CliController </b>classes) this allows for better separation between the UI and the logic of the program."
						}
					},
					{
						"id": "Gn9PMkuZUb",
						"type": "paragraph",
						"data": {
							"text": "Another heavy consideration when developing this tool was that I wanted to focus on proper component-based design. In the past I often have not done a great job of making components flexible and reusable, and sometimes not making parts of the UI separate components when I should. For this project I focused on making all components flexible and reusable and paid close attention to what should and should not be its own component."
						}
					},
					{
						"id": "NVgusPwjkq",
						"type": "paragraph",
						"data": {
							"text": "One of the pitfalls of JavaScript/TypeScript is the binary reading/writing support. It can be frustrating and tedious to work with, especially when compared to other languages such as C# or Java. In the past I had written my own <b>Reader</b>&nbsp;class which greatly improves the quality of life when working with binary data, however for this project I also needed a <b>Writer</b>&nbsp;class which was measurably more difficult to make then the <b>Reader</b>&nbsp;class. To start, I used the <b>Reader</b>&nbsp;class as a reference, which helped to get me started, and I was able to implement almost all the features I wanted. Eventually I ran into an issue with TypeScript's lack of expandable <b>ArrayBuffers</b>. This was a necessary feature, so I added the classic solution of using an <b>expandCapacity</b>&nbsp;method to the <b>Writer</b>&nbsp;class. This allowed the writer to write bytes for an effectively infinite length but had one pitfall. Due to how <b>expandCapacity</b>&nbsp;doubles the length of the <b>Writer's</b>&nbsp;underlying <b>ArrayBuffer</b>, often I would be left with a large amount of 00 bytes at the end of the <b>Writer</b>. In order to fix this, I added a <b>trim</b>&nbsp;method to cut all trailing 00 bytes from the underlying <b>ArrayBuffer</b>."
						}
					},
					{
						"id": "ec9N1UbSbG",
						"type": "header",
						"data": {
							"text": "Licensing",
							"level": 2
						}
					},
					{
						"id": "MEdi0dmRKH",
						"type": "paragraph",
						"data": {
							"text": "For this project I chose to use the GPL 3.0 license because it provides freedom for modifications people may wish to make, but also ensures that I will be credited appropriately and that my work can't be used by a company to make proprietary software. Implementing the license took a bit of effort but was worth it. Since the application has both a UI and a CLI, the recommendation was to include a short notice in both, as well at the top of each file in the program. For the UI the short notice is included in the about window, and for the CLI there are two commands, <b>show w</b>&nbsp;for the warranty information, and <b>show c</b>&nbsp;for the conditions information."
						}
					},
					{
						"id": "Ylyrr8l9V6",
						"type": "header",
						"data": {
							"text": "Purpose",
							"level": 2
						}
					},
					{
						"id": "AnXhqyfZls",
						"type": "paragraph",
						"data": {
							"text": "The reasons I decided to tackle this project were primarily my interest in the game, wanting to make a project using the MVC pattern (which I had just learned in school), and being unsatisfied with the older save editor. I was also interested in exploring the changes that had been made to the CodeMirror library (what I used for the JSON editor in the main UI of the app."
						}
					},
					{
						"id": "chebiUxN8p",
						"type": "header",
						"data": {
							"text": "Conclusion",
							"level": 2
						}
					},
					{
						"id": "jjllveJ9KV",
						"type": "paragraph",
						"data": {
							"text": "Implementing the MVC design pattern in a project of my own helped me understand the real-world usage and application of the pattern. Completing this project also helped me understand why it is important to choose the right License for my projects, as well as how to properly implement them. Finally, in making this app I was able to gain a better understanding of how to design UI components to improve UI design efficiency and create a tool that is useful to not just me but other as well."
						}
					}
				],
				"version": "2.24.3"
			},
			"link": "https://github.com/Tormak9970/Darkest-Dungeon-Save-Editor",
			"image": "./images/projects/DDSEditor-main-ui.png"
		},
		"portfolio": {
			"index": 5,
			"name": "Portfolio",
			"description": "A website for displaying my work experience and projects.",
      "tech": [
        "Svelte",
        "TypeScript"
      ],
			"content": {
				"time": 1693762663522,
				"blocks": [
					{
						"type": "header",
						"data": {
							"text": "Description",
							"level": 2
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "This project is the website you are currently on. It is a replacement for my previous portfolio website, which I had not been keeping up to date. I decided to remake it from scratch using Svelte, TypeScript, and SASS (later removed), all of which are awesome frameworks I have wanted to learn for a while."
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Update v3.2.0",
							"level": 2
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Features:"
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "Now using the Srcery color palette",
									"items": []
								},
								{
									"content": "\"Flattened\" the UI to make it feel more cohesive",
									"items": []
								},
								{
									"content": "Overhauled the 404 error screen to better fit the rest of the website",
									"items": []
								},
								{
									"content": "Now leveraging Svelte's features wherever possible",
									"items": [
										{
											"content": "Previously had a lot of old JavaScript logic",
											"items": []
										}
									]
								}
							]
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Fixes:"
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "Removed duplicate theme.css imports",
									"items": []
								},
								{
									"content": "Made all card entries have the same height",
									"items": []
								},
								{
									"content": "Removed the PWA manifest from the website",
									"items": [
										{
											"content": "Didn't really make sense to have the website be a PWA, since its not a tool",
											"items": []
										}
									]
								},
								{
									"content": "Organizations now hide \"Associated Projects\" when the list is empty",
									"items": []
								},
								{
									"content": "Updated the versions for many dependencies",
									"items": []
								},
								{
									"content": "Fixed bad naming conventions used in variables and file paths throughout the website",
									"items": []
								}
							]
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Changes:"
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "Simplified the card entries into one component",
									"items": []
								},
								{
									"content": "Split the navigation elements into components",
									"items": []
								},
								{
									"content": "Changed the desktop entries to use a shared base component",
									"items": []
								},
								{
									"content": "Abstracted many duplicated functions to a utility file to improve maintainability",
									"items": []
								}
							]
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Update v3.1.1",
							"level": 2
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "Moved dots to be directly on the portfolio site",
									"items": []
								},
								{
									"content": "Mobile about page was not scrolling",
									"items": []
								},
								{
									"content": "Fixed link coloring",
									"items": []
								}
							]
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Update v3.1.0",
							"level": 2
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "Fixed styling edge case causing entry descriptions to go off screen",
									"items": []
								},
								{
									"content": "Fixed delay when scrolling entries",
									"items": []
								},
								{
									"content": "Fixed bug with experience layout",
									"items": []
								},
								{
									"content": "Fixed bug with art layout",
									"items": []
								},
								{
									"content": "Centered entry images",
									"items": []
								},
								{
									"content": "Fixed org image sizing",
									"items": []
								}
							]
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Update v3.0.0",
							"level": 2
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "Changed Organizations to have a smaller preview and their own page with more details. This helps improve the layout, especially on smaller devices phones.",
									"items": []
								},
								{
									"content": "Split projects into \"Projects\" and \"Archive\". This allows the projects page to show of my newest/most noteworthy projects, while still allowing me to share my less impressive projects.",
									"items": []
								},
								{
									"content": "Fixed position of the jump nav stop getting messed up on window resize",
									"items": []
								},
								{
									"content": "Fixed relative paths for images breaking pages when navigating to a sub URL",
									"items": []
								},
								{
									"content": "Added a custom 404 fallback page",
									"items": []
								},
								{
									"content": "Changed all sections to be sorted by most recent entry",
									"items": []
								}
							]
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Update v2.0.0",
							"level": 2
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "Removed all SASS",
									"items": [
										{
											"content": "While SASS is a great tool, it is becoming obsolete with the improvements to vanilla CSS, and adds unnecessary compiling steps to the project",
											"items": []
										}
									]
								},
								{
									"content": "Updated the scroll indicator",
									"items": [
										{
											"content": "it is now a fixed height (which is based on screen height), which will work better as I add more entries to each page",
											"items": []
										}
									]
								},
								{
									"content": "Changed how the scroll transitions are implimented",
									"items": [
										{
											"content": "They are now modified svelte transitions which significantly simplifies their implementation",
											"items": []
										}
									]
								},
								{
									"content": "Optimized image sizes to improve loading times",
									"items": []
								},
								{
									"content": "Changed the mobile menu to slide over the page",
									"items": [
										{
											"content": "provides a cleaner experience",
											"items": []
										}
									]
								},
								{
									"content": "Added a copyright label to all pages",
									"items": []
								},
								{
									"content": "Added a more interesting landing page",
									"items": []
								},
								{
									"content": "Reduced Cross Origin requests to improve loading times",
									"items": []
								}
							]
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Purpose",
							"level": 2
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "I wanted to make a portfolio site that was easier to keep up to date and looked professional",
									"items": []
								},
								{
									"content": "I wanted to learn some web technologies I had seen in the past but never got around to looking into",
									"items": []
								}
							]
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Conclusion",
							"level": 2
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "I have a portfolio website that looks professional, is easy to update, and that I can be proud of",
									"items": []
								},
								{
									"content": "I have experience using TypeScript, Svelte, and SASS",
									"items": []
								}
							]
						}
					}
				],
				"version": "2.19.3"
			},
			"link": "https://travislane.dev",
			"image": "./images/projects/portfolio-site.png"
		},
		"untitled-card-game": {
			"index": 6,
			"name": "Untitled Card Game",
			"description": "A Solitaire game made with animated cards and a pixel art style.",
			"content": {
				"time": 1679188413134,
				"blocks": [
					{
						"id": "KmqwGgYXxy",
						"type": "header",
						"data": {
							"text": "Description",
							"level": 2
						}
					},
					{
						"id": "XG0W_wQ5Jr",
						"type": "paragraph",
						"data": {
							"text": "This is a TypeScript and Svelte implementation of the classic card game Solitaire, based on the Klondike rules. The UI has a pixel art theme, and the face cards are animated using classic frame by frame sprites. It has a full undo/redo system, difficulty settings, score keeping, and animations for flipping over cards, undos, and redos. These were especially difficult considering a side effect of the Drag-n-Drop library I settled on is that Svelte's built in animation system doesn't work, so these had to be done by hand."
						}
					},
					{
						"id": "25TRtnv23G",
						"type": "header",
						"data": {
							"text": "Features",
							"level": 2
						}
					},
					{
						"id": "yP-slOzEcg",
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "Multiple difficulties",
									"items": [
										{
											"content": "Different difficulties change the number of cards flipped over at a time, penalty for undos/redos, penalty for recycling the deck, and overall bonus to your score at the end.",
											"items": []
										}
									]
								},
								{
									"content": "Undo and Redo system",
									"items": [
										{
											"content": "Any move can be undone and redone, and the cards will transition smoothly from one position to the other",
											"items": []
										}
									]
								},
								{
									"content": "Seeded deals",
									"items": [
										{
											"content": "When dealing, the card deck is shuffled with a seed, making deals replicateable",
											"items": []
										}
									]
								},
								{
									"content": "Browser and File based saving",
									"items": []
								},
								{
									"content": "Pixel art inspired cards and UI",
									"items": []
								}
							]
						}
					},
					{
						"id": "zFo_A58yiz",
						"type": "header",
						"data": {
							"text": "Conclusion",
							"level": 2
						}
					},
					{
						"id": "yLOZV8wLJa",
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "I was able to recreate one of my favorite games with a fun asthetic",
									"items": []
								},
								{
									"content": "I was able to familiarize myself with a robust Svelte Drag-n-Drop library",
									"items": []
								}
							]
						}
					}
				],
				"version": "2.24.3"
			},
			"link": "https://solitaire.travislane.dev/",
			"image": "./images/projects/untitled-card-game.png"
		},
		"portfolio-editor": {
			"index": 7,
			"name": "Portfolio Editor",
			"description": "An app that augments editing my portfolio, giving me no excuse to keep it up to date.",
      "tech": [
        "Svelte",
        "Tauri",
        "TypeScript",
        "Rust"
      ],
			"content": {
				"time": 1693489605400,
				"blocks": [
					{
						"type": "header",
						"data": {
							"text": "Description",
							"level": 2
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Initially, this project was going to be written using the Electron framework, but right around when I started it, I heard about Tauri. Tauri is great because it allows you to build more secure apps with smaller bundle sizes, and has a better developer experience then Electron. The app itself makes updating my portfolio easy and straightforward, allowing me to focus more on my projects."
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Version 2.1.0",
							"level": 2
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Fixes:"
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "Fixed recurring image save/display issue",
									"items": []
								},
								{
									"content": "Added transitions to all background color changes",
									"items": []
								},
								{
									"content": "EditorJS usage is much more reliable",
									"items": []
								},
								{
									"content": "All components now utilize the proper Svelte features",
									"items": [
										{
											"content": "Previously many were just regular JavaScript grouped into a Svelte component. Now they leverage Svelte's amazing reactivity.",
											"items": []
										}
									]
								},
								{
									"content": "Removed creation modals and replaced with simplified \"new entry\" generation",
									"items": []
								},
								{
									"content": "Revamped EditorJS styles",
									"items": [
										{
											"content": "Simplified the style rules, and now have better coverage",
											"items": []
										}
									]
								},
								{
									"content": "Images in EditorJS blocks now properly get added to scope",
									"items": []
								}
							]
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Features:"
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "Added an \"Unsaved Changes\" warning modal",
									"items": []
								},
								{
									"content": "Switched to using the Srcery color palette",
									"items": []
								},
								{
									"content": "Added reordering to entry lists",
									"items": []
								},
								{
									"content": "Shifted the design language to better match my personal choice",
									"items": [
										{
											"content": "A flatter design, with subtle rounding to smooth out the look, while not being garish",
											"items": []
										}
									]
								}
							]
						}
					},
					{
						"type": "paragraph",
						"data": {
							"text": "Refactoring:"
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "Revamped the entire layout of the app",
									"items": []
								},
								{
									"content": "Renamed almost all variables to be more readable",
									"items": []
								},
								{
									"content": "Abstracted EditorJS to a shared component for reduced code complexity",
									"items": []
								},
								{
									"content": "Significantly decreased overall code complexity",
									"items": []
								},
								{
									"content": "All interactables now share property names",
									"items": []
								},
								{
									"content": "Split state into multiple stores for easier reactivity",
									"items": []
								},
								{
									"content": "Switched the delete",
									"items": []
								}
							]
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Version 1.2.3",
							"level": 2
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "Updated to use new my new logo",
									"items": []
								},
								{
									"content": "Fixed issues with double saving images",
									"items": []
								},
								{
									"content": "Fixed issues with deleting entries",
									"items": []
								}
							]
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Version 1.2.2",
							"level": 2
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "Added support for new portfolio data structure",
									"items": []
								},
								{
									"content": "Added buttons for archive management",
									"items": []
								},
								{
									"content": "Fixed old issue with org keys not being lower case",
									"items": []
								},
								{
									"content": "Fixed issue with project's org prop not being updated when added to an Organization's projects list",
									"items": []
								}
							]
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Purpose",
							"level": 2
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "Wanted to rework the structure of my portfolio",
									"items": []
								},
								{
									"content": "Wanted to streamline the process of updating my portfolio",
									"items": []
								},
								{
									"content": "Wanted to learn how to use the Tauri framework",
									"items": []
								}
							]
						}
					},
					{
						"type": "header",
						"data": {
							"text": "Conclusion",
							"level": 2
						}
					},
					{
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "I now have a small tool that makes it very easy to keep my portfolio up to date",
									"items": []
								},
								{
									"content": "Was able to rework the structure of my portfolio into a more intuitive form",
									"items": []
								},
								{
									"content": "Got to learn the basics of the Tauri framework",
									"items": []
								}
							]
						}
					}
				],
				"version": "2.19.3"
			},
			"link": "https://github.com/Tormak9970/portfolio-updater",
			"image": "./images/projects/portfolio-editor.png"
		},
		"vite-plugin-sitemap": {
			"index": 8,
			"name": "Vite-Plugin-Sitemap",
			"description": "A Vite plugin for generating web sitemaps at build time.",
      "tech": [
        "Vite",
        "Rollup",
        "TypeScript"
      ],
			"content": {
				"time": 1675718444292,
				"blocks": [
					{
						"id": "MvdHNFFz4d",
						"type": "header",
						"data": {
							"text": "Description",
							"level": 2
						}
					},
					{
						"id": "gdxiqz3U_D",
						"type": "paragraph",
						"data": {
							"text": "I had the idea to make this npm package because I was working on my portfolio, and came across a neat little rollup plugin for generating sitemaps. Vite allows users to use most rollup plugins, so I just used that, but it caused some issues, so I decided to write my own with some added features."
						}
					},
					{
						"id": "it04sm7mzL",
						"type": "header",
						"data": {
							"text": "Purpose",
							"level": 2
						}
					},
					{
						"id": "8vljNfeNgJ",
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "Found a similar Rollup plugin, which proved problematic when used with github actions",
									"items": []
								},
								{
									"content": "Needed to generate sitemaps for both this website and SWTORSlicers.org",
									"items": []
								},
								{
									"content": "Wanted to add a hook to allow dynamic sitemap generation to the plugin",
									"items": []
								}
							]
						}
					},
					{
						"id": "fIYKc3fzce",
						"type": "header",
						"data": {
							"text": "Conclusion",
							"level": 2
						}
					},
					{
						"id": "oHFnUhy81i",
						"type": "list",
						"data": {
							"style": "unordered",
							"items": [
								{
									"content": "Learned how to create an npm package",
									"items": []
								},
								{
									"content": "Created a useful little package for others to use",
									"items": []
								}
							]
						}
					}
				],
				"version": "2.24.3"
			},
			"link": "https://www.npmjs.com/package/@tormak/vite-plugin-sitemap",
			"image": "./images/projects/vite-plugin-sitemap.png"
		}
	},
	"experience": {
		"synergy-animal-behavior-behavior-assistant": {
			"index": 2,
      "duration": "Summer 2020",
			"company": "Synergy Animal Behavior",
			"position": "Assistant",
      "companyLink": "https://synergyanimalbehavior.com/",
			"description": "Created and managed a database of clients and resources for Synergy Animal Behavior. I also spent time researching and summarizing academic articles."
		},
		"city-wood-external-developer": {
			"index": 1,
      "duration": "Summer 2022",
			"company": "City Wood",
			"position": "External Developer",
      "companyLink": "http://www.city-wood.com/",
			"description": "I worked on creating an inventory management tool. The web app uses Firebase for hosting, authentication, and data storage, as well as Google Cloud. I completed the beta stage and stopped receiving contact, so the project remains unfinished."
		},
		"actalent-software-engineer": {
			"index": 0,
      "duration": "2023 — Present",
			"company": "Actalent",
			"position": "Full Stack Software Engineer",
      "companyLink": "https://www.actalentservices.com/",
			"description": "I have worked on a small team alongside Mitsubishi Electric US using Angular for a thermostat app, and alongside Cisco Systems Inc. using NextJS 13 for a hardware test automation dashboard."
		}
	}
}